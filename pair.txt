#include<iostream>
#include<utility>
#include<string>
#include<tuple>
#include<functional>
using namespace std;

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2> &p)
{
    return os << "[" << p.first << " , " << p.second << "]" << endl;
}

class Foo 
{
public:
    Foo(tuple<int, double>)
    {
        cout << "Foo::Foo(tuple)" << endl;
    }

    //Foo(int i, double d)
    //{
    //    cout << "Foo::Foo(int, double)" << endl;   
    //}

    template<typename... Args>
    Foo(Args... args)
    {
        cout << "Foo::Foo(args...)" << endl;
    }
};

int main() {
    pair<int, string> p1 = make_pair(1, "hello");
    pair<int, string> p2 = make_pair(2, "world");

    //cout << p1 << p2;
    //cout << tuple_size<pair<int, string>>::value << endl;
    //tuple_element<1, pair<int, string>>::type second = get<1>(p1);
    //cout << "second: " << second << endl;

    
    tuple<int, double> t(10, 10.2);

    //pass the tuple as a whole to the constructor of Foo
    /*pair<int, Foo> p3 (10,t);*/

    //pass the elements of the tuple to the constructor of Foo
    /*pair<int, Foo> p4(piecewise_construct, make_tuple(10), t);*/
     
    pair<int, float> pair7(10, 3.14F);    //create pair<int, float>, 3.14 default double
    auto pair8 = make_pair(10, 3.14);    //create pair<int, double>


    int i = 10;
    string s = "hello";

    auto p5 = make_pair(move(i), move(s));    //i and s are nolonger used
    cout << "p5.first: " << p5.first << " , p5.second: " << p5.second << endl;

    int j = 100;

    auto p6 = make_pair(ref(j), ref(j));  //create pair<int&, int&>
    ++p6.first;
    cout << "j: " << j << endl;
    ++p6.second;
    cout << "j: " << j << endl;

    auto p9 = make_pair('x', 'y');
    char c;
    tie(ignore, c) = p9; //extract second value into c(ignore first value)
    cout << "c: " << c << endl;

    auto p10 = make_pair('a', 'B');   // '==' for return x.first == y.first && x.second == y.second, 
    auto p11 = make_pair('A', 'B');

    cout <<" p10 < p11 ? " <<static_cast<bool>(p10 < p11) << endl;  //比较运算符， first value具有较高优先级， first value相等才比较second value

    system("pause");

    return 0;
}