#include<iostream>
#include<string>
#include<tuple>
#include<complex>
using namespace std;


int main() {
    //elements are initial with default value
    tuple<string, int, int, complex<double>> t;

    //create and initialize a tuple explicitly
    tuple<int, float, string> t1(41, 6.3F, "leo");

    //print:
    cout << get<0>(t1) <<" , "<< get<1>(t1)<<" , "<< get<2>(t1) << endl;

    //create tuple with make_tuple(), <int, float, const char*>便捷建立tuple，无需明确指出类型
    auto t2 = make_tuple(22, 44.1F, "jay");

    //assign first value in t2 to t1
    get<0>(t1) = get<0>(t2);
    cout << get<0>(t1) << " , " << get<1>(t1) << " , " << get<2>(t1) << endl;

    if (t1 < t2)
    {
        t1 = t2;
    }

    //print:
    //int i = 0;
    /*cout<< get<i>(t1);*/    //tuple不允许迭代元素，get索引值无法传递变量，传递无效索引亦会报错 
    cout<<get<0>(t1) << " , " << get<1>(t1) << " , " << get<2>(t1) << endl;

    auto p = make_pair<int, double>(1, 3.14);
    auto t3 = tuple<int, double>(p);
    cout << get<0>(t3) << " , " << get<1>(t3) << endl;

    string s = "hello";

    auto t4 = make_tuple(s);
    get<0>(t4) = "world";
    cout << "s: " << s << " , t4<0>: " << get<0>(t4) << endl;

    auto t5 = make_tuple(ref(s));
    get<0>(t5) = "world";
    cout << "s: " << s << " , t5<0>: " << get<0>(t5) << endl;

    tuple<int, float, string> t6(1, 3.14F, "hello");   //packing values into tuple
    cout << "t6<0>: " << get<0>(t6) << " , t6<1>: " << get<1>(t6) << " , t6<2>: " << get<2>(t6) << endl;
    int i = 0;
    float f = 0.0F;
    string s1 = "";
    tie(i, f, s1) = t6;      //by reference, upack tuple into variables
    cout << "i: " << i << " , f: " << f << " , s1: " << s1 << endl;

    system("pause");

    return 0;
}