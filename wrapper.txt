#include<iostream>
#include<functional>
#include<vector>
using namespace std;

int sub(int x, int y)
{
    return x - y;
}


class A
{
public:
    void memfunc() const
    {
        cout << "This is A::memfunc()." << endl;
    }

    int memMulti(int x, int y) const
    {
        return x*y;
    }


};

int main()
{
    //reference wrapper
    vector<reference_wrapper<int>> v;

    int i = 10;

    v.push_back(i);

    for (int i : v)
        cout << "element: " << i << endl;

    i = 100;


    for (int i : v)
        cout << "element: " << i << endl;

    //function type wrapper
    vector<function<int(int, int)>> tasks;
    tasks.push_back(sub);
    tasks.push_back([i](int a, int b)->int {if (i>0) return a + b; else return a - b; });
    for (function<int(int, int)> f : tasks)
    {
       cout<<"resut of task: "<< f(100, 200)<<endl;
    }

    //member function type wrapper
    function<void(const A&)> mf1;                //借以调用的类对象作为第一实参
    function<int(const A&, int, int)> mf2;

    mf1 = &A::memfunc;
    mf2 = &A::memMulti;

    mf1(A());
    int a = 200, b = 100;
    cout << "Multi(a,b): " << mf2(A(), a, b) << endl;

   
    system("pause");
    return EXIT_SUCCESS;
}
