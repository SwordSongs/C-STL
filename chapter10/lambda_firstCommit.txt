#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main()
{
    auto plus10 = [](int i) {  return i + 10;   };
    cout << "+10: " << plus10(7) << endl;

    auto plus10times2 = [](int i) { return (i + 10) * 2; };
    cout << "+10后*2: " << plus10times2(7) << endl;

    auto pow3 = [](int i) {    return i * i * i; };
    cout << "x*x*x: " << pow3(2) << endl;

    auto inverseDivide = [](double d1, double d2) { return d2 / d1; };
    cout << "invdiv: " << inverseDivide(7, 49) << endl;

    vector<int> coll = { 1,2,3,4,5,6,7,8 };

    //process and print mean value
    long sum = 0;
    for_each(coll.begin(), coll.end(),
            [&](int elem) { sum += elem; });

    double mv = static_cast<double>(sum) / static_cast<double>(coll.size());
    cout << "mean value: " << mv << endl;

    for (auto &i : coll)
    {
        cout << i << " ";
    }
    cout << endl;

    vector<int>::iterator pos;
    int count = 0;
    //pos = remove_if(coll.begin(), coll.end(),
    //                [count] (int) mutable {
    //                    return ++count == 3;
    //                });
    //coll.erase(pos, coll.end());
    //cout <<"count: "<< count << " , 3rd removed: " << endl;   //6 is also removed. , copy lambda
    //for (auto &i : coll)
    //{
    //    cout << i << " ";
    //}
    //cout << endl;

    pos = remove_if(coll.begin(), coll.end(),
        [&](int){
            return ++count == 3;
        });
    coll.erase(pos, coll.end());
    cout << "count: " << count << " , 3rd removed: " << endl;   //as expect
    for (auto &i : coll)
    {
        cout << i << " ";
    }
    cout << endl;

    system("pause");
    return EXIT_SUCCESS;
}